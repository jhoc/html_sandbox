let m_counter = 0;
const FLT_MAX = 1; //arbitrary

class Grid {
    constructor(rowNum, colNum, w, h) {
        this.rows = rowNum;
        this.columns = colNum;
        this.width = w;
        this.height = h;

        this.cellWidth = this.width / this.rows;
        this.cellHeight = this.height / this.columns;

        this.blocks = new Array(Math.round(rowNum * colNum / 3));
        this.src = Array(2);
        this.dest = Array(2);
        //this.setBlocks();
    }

rowNum(){
    return this.rows;
}

columnNum() {
    return this.columns;
}

    start() {
        return this.src;
    }

    end() {
        return this.dest;
    }

    setBlocks() {

        for (var i = 0; i < this.blocks.length; i++) {
            var block = Array(2);
            block[1] = Math.round(random(0, this.columns));
            block[0] = Math.round(random(0, this.rows));
            this.blocks[i] = block;
        }


        this.src[1] = Math.round(random(0, this.columns - 1));
        this.src[0] = Math.round(random(0, this.rows - 1));
        this.dest[1] = Math.round(random(0, this.columns - 1));
        this.dest[0] = Math.round(random(0, this.rows - 1));
        var found = false;
        while (this.src === this.end) {
            this.dest[1] = Math.round(random(0, this.columns - 1));
            this.dest[0] = Math.round(random(0, this.rows - 1));
        }
    }

    cellWidth() {
        return this.cellWidth;
    }

    cellHeight() {
        return this.cellHeight;
    }

    draw() {
        let y = 0;
        for (let i = 0; i < this.columns; i++) {
            line(0, y, this.width, y)
            y += this.cellHeight;
        }

        let x = 0;
        for (let i = 0; i < this.rows; i++) {
            line(x, 0, x, this.height);
            x += this.cellWidth;
        }

        for (let i = 0; i < this.blocks.length; i++) {
            x = this.cellWidth * this.blocks[i][0];
            y = this.cellHeight * this.blocks[i][1];
            //x = Math.round(random( 0, 10 )) * this.cellWidth;
            //y = Math.round(random( 0, 10 )) * this.cellHeight;
            fill(100);
            rect(x, y, this.cellWidth, this.cellHeight);
        }

        fill(40, 200, 80);
        rect(this.src[0] * this.cellWidth, this.src[1] * this.cellHeight, this.cellWidth, this.cellHeight);
        fill(200, 40, 80);
        rect(this.dest[0] * this.cellWidth, this.dest[1] * this.cellHeight, this.cellWidth, this.cellHeight);
    }


}

///////////////////////////////////////////////////////////////////////////7
//////////////////////////////////////////////////////////////////////////
class Cell {
    // Row and Column index of its parent
    // Note that 0 <= i <= ROW-1 & 0 <= j <= COL-1
    constructor() {
        this.parent_i = 0;
        this.parent_j = 0;
        this.f = 0;
        this.g = 0;
        this.h = 0;
    }
}


class AStarSearch {
    constructor(grid) {
        this.grid = grid;
    }

    isValid(row, col) {
        // Returns true if row number and column number
        // is in range
        return (row >= 0) && (row < this.grid.rowNum()) && (col >= 0) && (col < this.grid.columnNum());
    }

    isUnBlocked(grid, row, col) {
        for (var i = 0; i < this.grid.blocks.length; i++) {
            if (this.grid.blocks[i][0] == row && this.grid.blocks[i][1] == col) {
                return true;
            }
        }
        return false;
    }

    isDestination(row, col) {
        if (row == this.grid.end()[0] && col == this.grid.end()[1])
            return (true);
        else
            return (false);
    }

    calculateHValue(row, col) {
        // Return using the distance formula
        return (Math.sqrt((row - this.grid.end()[0]) * (row - this.grid.end()[0]) + (col - this.grid.end()[1]) * (col - this.grid.end()[1])));
    }

    tracePath(cells) {
        console.log("The Path is ");
        let row = this.grid.end()[0];
        let col = this.grid.end()[1];

        let Path = [];

        while (!(cells[row][col].parent_i == row && cells[row][col].parent_j == col)) {
            Path.push([row, col]);
            let temp_row = cells[row][col].parent_i;
            let temp_col = cells[row][col].parent_j;
            row = temp_row;
            col = temp_col;
        }

        Path.push([row, col]);
        while (Path.length > 0) {
            let p = Path[0];
            Path.shift();

            if (p[0] == 2 || p[0] == 1) {
                console.log("-> (" + p[0] + ", " + (p[1] - 1) + ")");
            }
            else console.log("-> (" + p[0] + ", " + p[1] + ")");
        }

        return;
    }

    search() {
        // If the source is out of range
        if (this.isValid(this.grid.start()[0], this.grid.start()[1]) == false) {
            console.log("Source is invalid\n");
            return;
        }

        // If the destination is out of range
        if (this.isValid(this.grid.end()[0], this.grid.end()[1]) == false) {
            console.log("Destination is invalid\n");
            return;
        }

        // If the destination cell is the same as source cell
        if (this.isDestination(this.grid.start()[0], this.grid.start()[1])
            == true) {
            console.log("We are already at the destination\n");
            return;
        }

        // Create a closed list and initialise it to false which
        // means that no cell has been included yet This closed
        // list is implemented as a boolean 2D array
        let closedList = new Array(this.grid.rowNum());
        for (let i = 0; i < this.grid.rowNum(); i++) {
            closedList[i] = new Array(this.grid.columnNum()).fill(false);
        }

        // Declare a 2D array of structure to hold the details
        // of that cell
        let cellDetails = new Array(this.grid.rowNum());
        for (let i = 0; i < this.grid.rowNum(); i++) {
            cellDetails[i] = new Array(this.grid.columnNum());
        }

        let i, j;

        for (i = 0; i < this.grid.rowNum(); i++) {
            for (j = 0; j < this.grid.columnNum(); j++) {
                cellDetails[i][j] = new Cell();
                cellDetails[i][j].f = 2147483647;
                cellDetails[i][j].g = 2147483647;
                cellDetails[i][j].h = 2147483647;
                cellDetails[i][j].parent_i = -1;
                cellDetails[i][j].parent_j = -1;
            }
        }

        // Initialising the parameters of the starting node
        i = this.grid.start()[0], j = this.grid.start()[1];
        cellDetails[i][j].f = 0;
        cellDetails[i][j].g = 0;
        cellDetails[i][j].h = 0;
        cellDetails[i][j].parent_i = i;
        cellDetails[i][j].parent_j = j;

        /*
         Create an open list having information as-
         <f, <i, j>>
         where f = g + h,
         and i, j are the row and column index of that cell
         Note that 0 <= i <= ROW-1 & 0 <= j <= COL-1
         This open list is implemented as a set of pair of
         pair.*/
        let openList = new Map();

        // Put the starting cell on the open list and set its
        // 'f' as 0
        openList.set(0, [i, j]);

        // We set this boolean value as false as initially
        // the destination is not reached.
        let foundDest = false;

        while (openList.size > 0) {
            let p = openList.entries().next().value

            // Remove this vertex from the open list
            openList.delete(p[0]);

            // Add this vertex to the closed list
            i = p[1][0];
            j = p[1][1];
            closedList[i][j] = true;

            /*
             Generating all the 8 successor of this cell
     
                 N.W   N   N.E
                   \   |   /
                    \  |  /
                 W----Cell----E
                      / | \
                    /   |  \
                 S.W    S   S.E
     
             Cell-->Popped Cell (i, j)
             N -->  North       (i-1, j)
             S -->  South       (i+1, j)
             E -->  East        (i, j+1)
             W -->  West           (i, j-1)
             N.E--> North-East  (i-1, j+1)
             N.W--> North-West  (i-1, j-1)
             S.E--> South-East  (i+1, j+1)
             S.W--> South-West  (i+1, j-1)*/

            // To store the 'g', 'h' and 'f' of the 8 successors
            let gNew, hNew, fNew;

            //----------- 1st Successor (North) ------------

            // Only process this cell if this is a valid one
            if (this.isValid(i - 1, j) == true) {
                // If the destination cell is the same as the
                // current successor
                if (this.isDestination(i - 1, j, this.grid.end()) == true) {
                    // Set the Parent of the destination cell
                    cellDetails[i - 1][j].parent_i = i;
                    cellDetails[i - 1][j].parent_j = j;
                    console.log("The destination cell is found\n");
                    this.tracePath(cellDetails);
                    foundDest = true;
                    return;
                }
                // If the successor is already on the closed
                // list or if it is blocked, then ignore it.
                // Else do the following
                else if (closedList[i - 1][j] == false
                    && this.isUnBlocked(this.grid, i - 1, j)
                    == true) {
                    gNew = cellDetails[i][j].g + 1;
                    hNew = this.calculateHValue(i - 1, j, this.grid.end());
                    fNew = gNew + hNew;

                    // If it isnâ€™t on the open list, add it to
                    // the open list. Make the current square
                    // the parent of this square. Record the
                    // f, g, and h costs of the square cell
                    //                OR
                    // If it is on the open list already, check
                    // to see if this path to that square is
                    // better, using 'f' cost as the measure.
                    if (cellDetails[i - 1][j].f == 2147483647
                        || cellDetails[i - 1][j].f > fNew) {
                        openList.set(fNew, [i - 1, j]);

                        // Update the details of this cell
                        cellDetails[i - 1][j].f = fNew;
                        cellDetails[i - 1][j].g = gNew;
                        cellDetails[i - 1][j].h = hNew;
                        cellDetails[i - 1][j].parent_i = i;
                        cellDetails[i - 1][j].parent_j = j;
                    }
                }
            }

            //----------- 2nd Successor (South) ------------

            // Only process this cell if this is a valid one
            if (this.isValid(i + 1, j) == true) {
                // If the destination cell is the same as the
                // current successor
                if (this.isDestination(i + 1, j, this.grid.end()) == true) {
                    // Set the Parent of the destination cell
                    cellDetails[i + 1][j].parent_i = i;
                    cellDetails[i + 1][j].parent_j = j;
                    console.log("The destination cell is found\n");
                    this.tracePath(cellDetails);
                    foundDest = true;
                    return;
                }
                // If the successor is already on the closed
                // list or if it is blocked, then ignore it.
                // Else do the following
                else if (closedList[i + 1][j] == false
                    && this.isUnBlocked(this.grid, i + 1, j)
                    == true) {
                    gNew = cellDetails[i][j].g + 1;
                    hNew = this.calculateHValue(i + 1, j, this.grid.end());
                    fNew = gNew + hNew;

                    // If it isnâ€™t on the open list, add it to
                    // the open list. Make the current square
                    // the parent of this square. Record the
                    // f, g, and h costs of the square cell
                    //                OR
                    // If it is on the open list already, check
                    // to see if this path to that square is
                    // better, using 'f' cost as the measure.
                    if (cellDetails[i + 1][j].f == 2147483647
                        || cellDetails[i + 1][j].f > fNew) {
                        openList.set(fNew, [i + 1, j]);
                        // Update the details of this cell
                        cellDetails[i + 1][j].f = fNew;
                        cellDetails[i + 1][j].g = gNew;
                        cellDetails[i + 1][j].h = hNew;
                        cellDetails[i + 1][j].parent_i = i;
                        cellDetails[i + 1][j].parent_j = j;
                    }
                }
            }

            //----------- 3rd Successor (East) ------------

            // Only process this cell if this is a valid one
            if (this.isValid(i, j + 1) == true) {
                // If the destination cell is the same as the
                // current successor
                if (this.isDestination(i, j + 1, this.grid.end()) == true) {
                    // Set the Parent of the destination cell
                    cellDetails[i][j + 1].parent_i = i;
                    cellDetails[i][j + 1].parent_j = j;
                    console.log("The destination cell is found\n");
                    this.tracePath(cellDetails);
                    foundDest = true;
                    return;
                }

                // If the successor is already on the closed
                // list or if it is blocked, then ignore it.
                // Else do the following
                else if (closedList[i][j + 1] == false
                    && this.isUnBlocked(this.grid, i, j + 1)
                    == true) {
                    gNew = cellDetails[i][j].g + 1;
                    hNew = this.calculateHValue(i, j + 1, this.grid.end());
                    fNew = gNew + hNew;

                    // If it isnâ€™t on the open list, add it to
                    // the open list. Make the current square
                    // the parent of this square. Record the
                    // f, g, and h costs of the square cell
                    //                OR
                    // If it is on the open list already, check
                    // to see if this path to that square is
                    // better, using 'f' cost as the measure.
                    if (cellDetails[i][j + 1].f == 2147483647
                        || cellDetails[i][j + 1].f > fNew) {
                        openList.set(fNew, [i, j + 1]);

                        // Update the details of this cell
                        cellDetails[i][j + 1].f = fNew;
                        cellDetails[i][j + 1].g = gNew;
                        cellDetails[i][j + 1].h = hNew;
                        cellDetails[i][j + 1].parent_i = i;
                        cellDetails[i][j + 1].parent_j = j;
                    }
                }
            }

            //----------- 4th Successor (West) ------------

            // Only process this cell if this is a valid one
            if (this.isValid(i, j - 1) == true) {
                // If the destination cell is the same as the
                // current successor
                if (this.isDestination(i, j - 1, this.grid.end()) == true) {
                    // Set the Parent of the destination cell
                    cellDetails[i][j - 1].parent_i = i;
                    cellDetails[i][j - 1].parent_j = j;
                    console.log("The destination cell is found\n");
                    this.tracePath(cellDetails);
                    foundDest = true;
                    return;
                }

                // If the successor is already on the closed
                // list or if it is blocked, then ignore it.
                // Else do the following
                else if (closedList[i][j - 1] == false
                    && this.isUnBlocked(this.grid, i, j - 1)
                    == true) {
                    gNew = cellDetails[i][j].g + 1;
                    hNew = this.calculateHValue(i, j - 1, this.grid.end());
                    fNew = gNew + hNew;

                    // If it isnâ€™t on the open list, add it to
                    // the open list. Make the current square
                    // the parent of this square. Record the
                    // f, g, and h costs of the square cell
                    //                OR
                    // If it is on the open list already, check
                    // to see if this path to that square is
                    // better, using 'f' cost as the measure.
                    if (cellDetails[i][j - 1].f == 2147483647
                        || cellDetails[i][j - 1].f > fNew) {
                        openList.set(fNew, [i, j - 1]);

                        // Update the details of this cell
                        cellDetails[i][j - 1].f = fNew;
                        cellDetails[i][j - 1].g = gNew;
                        cellDetails[i][j - 1].h = hNew;
                        cellDetails[i][j - 1].parent_i = i;
                        cellDetails[i][j - 1].parent_j = j;
                    }
                }
            }

            //----------- 5th Successor (North-East)
            //------------

            // Only process this cell if this is a valid one
            if (this.isValid(i - 1, j + 1) == true) {
                // If the destination cell is the same as the
                // current successor
                if (this.isDestination(i - 1, j + 1, this.grid.end()) == true) {
                    // Set the Parent of the destination cell
                    cellDetails[i - 1][j + 1].parent_i = i;
                    cellDetails[i - 1][j + 1].parent_j = j;
                    console.log("The destination cell is found\n");
                    this.tracePath(cellDetails);
                    foundDest = true;
                    return;
                }

                // If the successor is already on the closed
                // list or if it is blocked, then ignore it.
                // Else do the following
                else if (closedList[i - 1][j + 1] == false
                    && this.isUnBlocked(this.grid, i - 1, j + 1)
                    == true) {
                    gNew = cellDetails[i][j].g + 1.414;
                    hNew = this.calculateHValue(i - 1, j + 1, this.grid.end());
                    fNew = gNew + hNew;

                    // If it isnâ€™t on the open list, add it to
                    // the open list. Make the current square
                    // the parent of this square. Record the
                    // f, g, and h costs of the square cell
                    //                OR
                    // If it is on the open list already, check
                    // to see if this path to that square is
                    // better, using 'f' cost as the measure.
                    if (cellDetails[i - 1][j + 1].f == 2147483647
                        || cellDetails[i - 1][j + 1].f > fNew) {
                        openList.set(fNew, [i - 1, j + 1]);

                        // Update the details of this cell
                        cellDetails[i - 1][j + 1].f = fNew;
                        cellDetails[i - 1][j + 1].g = gNew;
                        cellDetails[i - 1][j + 1].h = hNew;
                        cellDetails[i - 1][j + 1].parent_i = i;
                        cellDetails[i - 1][j + 1].parent_j = j;
                    }
                }
            }

            //----------- 6th Successor (North-West)
            //------------

            // Only process this cell if this is a valid one
            if (this.isValid(i - 1, j - 1) == true) {
                // If the destination cell is the same as the
                // current successor
                if (this.isDestination(i - 1, j - 1, this.grid.end()) == true) {
                    // Set the Parent of the destination cell
                    cellDetails[i - 1][j - 1].parent_i = i;
                    cellDetails[i - 1][j - 1].parent_j = j;
                    console.log("The destination cell is found\n");
                    this.tracePath(cellDetails);
                    foundDest = true;
                    return;
                }

                // If the successor is already on the closed
                // list or if it is blocked, then ignore it.
                // Else do the following
                else if (closedList[i - 1][j - 1] == false
                    && this.isUnBlocked(this.grid, i - 1, j - 1)
                    == true) {
                    gNew = cellDetails[i][j].g + 1.414;
                    hNew = this.calculateHValue(i - 1, j - 1, this.grid.end());
                    fNew = gNew + hNew;

                    // If it isnâ€™t on the open list, add it to
                    // the open list. Make the current square
                    // the parent of this square. Record the
                    // f, g, and h costs of the square cell
                    //                OR
                    // If it is on the open list already, check
                    // to see if this path to that square is
                    // better, using 'f' cost as the measure.
                    if (cellDetails[i - 1][j - 1].f == 2147483647
                        || cellDetails[i - 1][j - 1].f > fNew) {
                        openList.set(fNew, [i - 1, j - 1]);
                        // Update the details of this cell
                        cellDetails[i - 1][j - 1].f = fNew;
                        cellDetails[i - 1][j - 1].g = gNew;
                        cellDetails[i - 1][j - 1].h = hNew;
                        cellDetails[i - 1][j - 1].parent_i = i;
                        cellDetails[i - 1][j - 1].parent_j = j;
                    }
                }
            }

            //----------- 7th Successor (South-East)
            //------------

            // Only process this cell if this is a valid one
            if (this.isValid(i + 1, j + 1) == true) {
                // If the destination cell is the same as the
                // current successor
                if (this.isDestination(i + 1, j + 1, this.grid.end()) == true) {
                    // Set the Parent of the destination cell
                    cellDetails[i + 1][j + 1].parent_i = i;
                    cellDetails[i + 1][j + 1].parent_j = j;
                    console.log("The destination cell is found\n");
                    this.tracePath(cellDetails);
                    foundDest = true;
                    return;
                }

                // If the successor is already on the closed
                // list or if it is blocked, then ignore it.
                // Else do the following
                else if (closedList[i + 1][j + 1] == false
                    && this.isUnBlocked(this.grid, i + 1, j + 1)
                    == true) {
                    gNew = cellDetails[i][j].g + 1.414;
                    hNew = this.calculateHValue(i + 1, j + 1, this.grid.end());
                    fNew = gNew + hNew;

                    // If it isnâ€™t on the open list, add it to
                    // the open list. Make the current square
                    // the parent of this square. Record the
                    // f, g, and h costs of the square cell
                    //                OR
                    // If it is on the open list already, check
                    // to see if this path to that square is
                    // better, using 'f' cost as the measure.
                    if (cellDetails[i + 1][j + 1].f == 2147483647
                        || cellDetails[i + 1][j + 1].f > fNew) {
                        openList.set(fNew, [i + 1, j + 1]);

                        // Update the details of this cell
                        cellDetails[i + 1][j + 1].f = fNew;
                        cellDetails[i + 1][j + 1].g = gNew;
                        cellDetails[i + 1][j + 1].h = hNew;
                        cellDetails[i + 1][j + 1].parent_i = i;
                        cellDetails[i + 1][j + 1].parent_j = j;
                    }
                }
            }

            //----------- 8th Successor (South-West)
            //------------

            // Only process this cell if this is a valid one
            if (this.isValid(i + 1, j - 1) == true) {
                // If the destination cell is the same as the
                // current successor
                if (this.isDestination(i + 1, j - 1, this.grid.end()) == true) {
                    // Set the Parent of the destination cell
                    cellDetails[i + 1][j - 1].parent_i = i;
                    cellDetails[i + 1][j - 1].parent_j = j;
                    console.log("The destination cell is found\n");
                    this.tracePath(cellDetails);
                    foundDest = true;
                    return;
                }

                // If the successor is already on the closed
                // list or if it is blocked, then ignore it.
                // Else do the following
                else if (closedList[i + 1][j - 1] == false
                    && this.isUnBlocked(this.grid, i + 1, j - 1)
                    == true) {
                    gNew = cellDetails[i][j].g + 1.414;
                    hNew = this.calculateHValue(i + 1, j - 1, this.grid.end());
                    fNew = gNew + hNew;

                    // If it isnâ€™t on the open list, add it to
                    // the open list. Make the current square
                    // the parent of this square. Record the
                    // f, g, and h costs of the square cell
                    //                OR
                    // If it is on the open list already, check
                    // to see if this path to that square is
                    // better, using 'f' cost as the measure.
                    if (cellDetails[i + 1][j - 1].f == FLT_MAX
                        || cellDetails[i + 1][j - 1].f > fNew) {
                        openList.set(fNew, [i + 1, j - 1]);

                        // Update the details of this cell
                        cellDetails[i + 1][j - 1].f = fNew;
                        cellDetails[i + 1][j - 1].g = gNew;
                        cellDetails[i + 1][j - 1].h = hNew;
                        cellDetails[i + 1][j - 1].parent_i = i;
                        cellDetails[i + 1][j - 1].parent_j = j;
                    }
                }
            }
        }

        // When the destination cell is not found and the open
        // list is empty, then we conclude that we failed to
        // reach the destination cell. This may happen when the
        // there is no way to destination cell (due to
        // blockages)
        if (foundDest == false)
            console.log("Failed to find the Destination Cell\n");

        return;
    }
}


///////////////////////////////////////////////////////////////////////////7
//////////////////////////////////////////////////////////////////////////

const grid = new Grid(20, 10, 900, 450);
var astar;
function setup() {
    createCanvas(900, 450);

    background(200);
    grid.setBlocks();
    astar = new AStarSearch(grid)
  astar.search();
}

function draw() {
    background(200);
    grid.draw();

    m_counter++;
}


function mouseClicked() {
    grid.setBlocks();
    astar = new AStarSearch(grid)
    astar.search();
}
